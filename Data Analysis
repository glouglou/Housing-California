import os
import tarfile
from six.moves import urllib

DOWNLOAD_ROOT="https://raw.githubusercontent.com/ageron/handson-ml/master/"
HOUSING_PATH="datasets/housing"
HOUSING_URL=DOWNLOAD_ROOT+HOUSING_PATH+"/housing.tgz"

def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path=os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz=tarfile.open(tgz_path)
    housing_tgz.extractall(path=housing_path)
    housing_tgz.close()
    
    import pandas as pd
def load_housing_data(housing_path=HOUSING_PATH):
    csv_path=os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)
HousingTab=load_housing_data()
fetch_housing_data()
HousingTab

HousingTab.info()
HousingTab["ocean_proximity"].value_counts()
HousingTab.describe()

%matplotlib inline 
import matplotlib.pyplot as plt
HousingTab.hist(bins=50, figsize=(20,15))
plt.show()

import numpy as np
def split_train_test(data, test_ratio):
    shuffled_indices=np.random.permutation(len(data))
    test_set_size=int(len(data)*test_ratio)
    test_indices=shuffled_indices[:test_set_size]
    train_indices=shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]

train_set, test_set=split_train_test(HousingTab,0.2)
print(len(train_set), "train +", len(test_set), "test")

import hashlib
def test_set_check(identifier, test_ratio, hash):
    return hash(np.int64(identifier)).digest()[-1]<256*test_ratio
def split_train_test_by_id(data, test_ratio, id_column, hash=hashlib.md5):
    ids=data[id_column]
    in_test_set=ids.apply(lambda id_: test_set_check(id_, test_ratio, hash))
    return data.loc[~in_test_set], data.loc[in_test_set]
    
    housing_with_id=HousingTab.reset_index()
train_set, test_set=split_train_test_by_id(housing_with_id, 0.2, "index")

housing_with_id["id"]=HousingTab["longitude"]*1000+HousingTab["latitude"]
train_set, test_set=split_train_test_by_id(housing_with_id,0.2,"id")

HousingTab["income_cat"]=np.ceil(HousingTab["median_income"]/1.5)
HousingTab["income_cat"].where(HousingTab["income_cat"]<5,5.0, inplace=True)
HousingTab["income_cat"].hist(bins=50, figsize=(20,15))

from sklearn.model_selection import StratifiedShuffleSplit

split=StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(HousingTab, HousingTab["income_cat"]):
    strat_train_set=HousingTab.loc[train_index]
    strat_test_set=HousingTab.loc[test_index]
HousingTab["income_cat"].value_counts()/len(HousingTab)   

for set_ in (strat_train_set, strat_test_set):
    set_.drop("income_cat", axis=1, inplace=True)
    
housing=strat_train_set.copy()

housing.plot(kind="scatter",x="longitude",y="latitude", alpha=0.4, s=housing["population"]/100, label="population", figsize=(10,7), c="median_house_value", cmap=plt.get_cmap("jet"),colorbar=True)
plt.legend()

corr_matrix=housing.corr()
corr_matrix["median_house_value"].sort_values(ascending=False)


from pandas.tools.plotting import scatter_matrix

attributes=["median_house_value", "median_income", "total_rooms", "housing_median_age"]
scatter_matrix(housing[attributes], figsize=(12,8))
